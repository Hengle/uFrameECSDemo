// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace uFrameECSDemo {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using UnityEngine;
    using uFrame.ECS;
    using UniRx;
    
    
    [uFrame.Attributes.uFrameIdentifier("94f65036-c558-4329-9688-353472d6bba9")]
    public partial class Projectile : uFrame.ECS.EcsComponent {
        
        private Subject<Vector3> _DirectionObservable;
        
        private Subject<Single> _SpeedObservable;
        
        [UnityEngine.SerializeField()]
        private Vector3 _Direction;
        
        [UnityEngine.SerializeField()]
        private Single _Speed;
        
        public int ComponentID {
            get {
                return 15;
            }
        }
        
        public IObservable<Vector3> DirectionObservable {
            get {
                if (_DirectionObservable == null) {
                    _DirectionObservable = new Subject<Vector3>();
                }
                return _DirectionObservable;
            }
        }
        
        public IObservable<Single> SpeedObservable {
            get {
                if (_SpeedObservable == null) {
                    _SpeedObservable = new Subject<Single>();
                }
                return _SpeedObservable;
            }
        }
        
        public Vector3 Direction {
            get {
                return _Direction;
            }
            set {
                _Direction = value;
                if (_DirectionObservable != null) {
                    _DirectionObservable.OnNext(value);
                }
            }
        }
        
        public Single Speed {
            get {
                return _Speed;
            }
            set {
                _Speed = value;
                if (_SpeedObservable != null) {
                    _SpeedObservable.OnNext(value);
                }
            }
        }
    }
}
