// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace uFrameECSDemo {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using UnityEngine;
    using uFrame.ECS;
    using UniRx;
    
    
    [uFrame.Attributes.uFrameIdentifier("ddaee2ad-fc4e-438f-bdae-f8a9929e693a")]
    public partial class SpawnWithRandomX : uFrame.ECS.EcsComponent {
        
        private Subject<Single> _ZObservable;
        
        private Subject<Single> _YObservable;
        
        private Subject<Vector2> _XRangeObservable;
        
        [UnityEngine.SerializeField()]
        private Single _Z;
        
        [UnityEngine.SerializeField()]
        private Single _Y;
        
        [UnityEngine.SerializeField()]
        private Vector2 _XRange;
        
        public int ComponentID {
            get {
                return 18;
            }
        }
        
        public IObservable<Single> ZObservable {
            get {
                if (_ZObservable == null) {
                    _ZObservable = new Subject<Single>();
                }
                return _ZObservable;
            }
        }
        
        public IObservable<Single> YObservable {
            get {
                if (_YObservable == null) {
                    _YObservable = new Subject<Single>();
                }
                return _YObservable;
            }
        }
        
        public IObservable<Vector2> XRangeObservable {
            get {
                if (_XRangeObservable == null) {
                    _XRangeObservable = new Subject<Vector2>();
                }
                return _XRangeObservable;
            }
        }
        
        public Single Z {
            get {
                return _Z;
            }
            set {
                _Z = value;
                if (_ZObservable != null) {
                    _ZObservable.OnNext(value);
                }
            }
        }
        
        public Single Y {
            get {
                return _Y;
            }
            set {
                _Y = value;
                if (_YObservable != null) {
                    _YObservable.OnNext(value);
                }
            }
        }
        
        public Vector2 XRange {
            get {
                return _XRange;
            }
            set {
                _XRange = value;
                if (_XRangeObservable != null) {
                    _XRangeObservable.OnNext(value);
                }
            }
        }
    }
}
