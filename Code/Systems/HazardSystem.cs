// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace uFrameECSDemo {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using UniRx;
    using uFrame.ECS;
    using uFrame.Kernel;
    using uFrameECSDemo;
    using UnityEngine;
    
    
    [uFrame.Attributes.uFrameIdentifier("3a1a8f1b-60bd-42a5-953c-9a3a75b184d5")]
    public partial class HazardSystem : uFrame.ECS.EcsSystem {
        
        private IEcsComponentManagerOf<EnemyAI> _EnemyAIManager;
        
        private IEcsComponentManagerOf<RandomRotation> _RandomRotationManager;
        
        private IEcsComponentManagerOf<Projectile> _ProjectileManager;
        
        private IEcsComponentManagerOf<SpawnWithRandomX> _SpawnWithRandomXManager;
        
        private IEcsComponentManagerOf<DestroyOnCollision> _DestroyOnCollisionManager;
        
        private IEcsComponentManagerOf<Hazard> _HazardManager;
        
        private HandleDestroyOnCollisionHandler HandleDestroyOnCollisionHandlerInstance = new HandleDestroyOnCollisionHandler();
        
        private BeginRandomRotationComponentCreated BeginRandomRotationComponentCreatedInstance = new BeginRandomRotationComponentCreated();
        
        private ProjectileCreatedComponentCreated ProjectileCreatedComponentCreatedInstance = new ProjectileCreatedComponentCreated();
        
        private SetRandomPositionComponentCreated SetRandomPositionComponentCreatedInstance = new SetRandomPositionComponentCreated();
        
        private HazardSystemOnCollisionEnterDispatcherHandler HazardSystemOnCollisionEnterDispatcherHandlerInstance = new HazardSystemOnCollisionEnterDispatcherHandler();
        
        public IEcsComponentManagerOf<EnemyAI> EnemyAIManager {
            get {
                return _EnemyAIManager;
            }
            set {
                _EnemyAIManager = value;
            }
        }
        
        public IEcsComponentManagerOf<RandomRotation> RandomRotationManager {
            get {
                return _RandomRotationManager;
            }
            set {
                _RandomRotationManager = value;
            }
        }
        
        public IEcsComponentManagerOf<Projectile> ProjectileManager {
            get {
                return _ProjectileManager;
            }
            set {
                _ProjectileManager = value;
            }
        }
        
        public IEcsComponentManagerOf<SpawnWithRandomX> SpawnWithRandomXManager {
            get {
                return _SpawnWithRandomXManager;
            }
            set {
                _SpawnWithRandomXManager = value;
            }
        }
        
        public IEcsComponentManagerOf<DestroyOnCollision> DestroyOnCollisionManager {
            get {
                return _DestroyOnCollisionManager;
            }
            set {
                _DestroyOnCollisionManager = value;
            }
        }
        
        public IEcsComponentManagerOf<Hazard> HazardManager {
            get {
                return _HazardManager;
            }
            set {
                _HazardManager = value;
            }
        }
        
        public override void Setup() {
            base.Setup();
            EnemyAIManager = ComponentSystem.RegisterComponent<EnemyAI>();
            RandomRotationManager = ComponentSystem.RegisterComponent<RandomRotation>();
            ProjectileManager = ComponentSystem.RegisterComponent<Projectile>();
            SpawnWithRandomXManager = ComponentSystem.RegisterComponent<SpawnWithRandomX>();
            DestroyOnCollisionManager = ComponentSystem.RegisterComponent<DestroyOnCollision>();
            HazardManager = ComponentSystem.RegisterComponent<Hazard>();
            this.OnEvent<uFrame.ECS.OnTriggerEnterDispatcher>().Subscribe(_=>{ HandleDestroyOnCollisionFilter(_); }).DisposeWith(this);
            RandomRotationManager.CreatedObservable.Subscribe(BeginRandomRotationComponentCreatedFilter).DisposeWith(this);
            ProjectileManager.CreatedObservable.Subscribe(ProjectileCreatedComponentCreatedFilter).DisposeWith(this);
            SpawnWithRandomXManager.CreatedObservable.Subscribe(SetRandomPositionComponentCreatedFilter).DisposeWith(this);
            this.OnEvent<uFrame.ECS.OnCollisionEnterDispatcher>().Subscribe(_=>{ HazardSystemOnCollisionEnterDispatcherFilter(_); }).DisposeWith(this);
        }
        
        protected void HandleDestroyOnCollisionHandler(uFrame.ECS.OnTriggerEnterDispatcher data, DestroyOnCollision source) {
            var handler = HandleDestroyOnCollisionHandlerInstance;
            handler.System = this;
            handler.Event = data;
            handler.Source = source;
            StartCoroutine(handler.Execute());
        }
        
        protected void HandleDestroyOnCollisionFilter(uFrame.ECS.OnTriggerEnterDispatcher data) {
            var SourceDestroyOnCollision = DestroyOnCollisionManager[data.EntityId];
            if (SourceDestroyOnCollision == null) {
                return;
            }
            if (!SourceDestroyOnCollision.Enabled) {
                return;
            }
            this.HandleDestroyOnCollisionHandler(data, SourceDestroyOnCollision);
        }
        
        protected void BeginRandomRotationComponentCreated(RandomRotation data, RandomRotation group) {
            var handler = BeginRandomRotationComponentCreatedInstance;
            handler.System = this;
            handler.Event = data;
            handler.Group = group;
            StartCoroutine(handler.Execute());
        }
        
        protected void BeginRandomRotationComponentCreatedFilter(RandomRotation data) {
            var GroupRandomRotation = RandomRotationManager[data.EntityId];
            if (GroupRandomRotation == null) {
                return;
            }
            if (!GroupRandomRotation.Enabled) {
                return;
            }
            this.BeginRandomRotationComponentCreated(data, GroupRandomRotation);
        }
        
        protected void ProjectileCreatedComponentCreated(Projectile data, Projectile group) {
            var handler = ProjectileCreatedComponentCreatedInstance;
            handler.System = this;
            handler.Event = data;
            handler.Group = group;
            StartCoroutine(handler.Execute());
        }
        
        protected void ProjectileCreatedComponentCreatedFilter(Projectile data) {
            var GroupProjectile = ProjectileManager[data.EntityId];
            if (GroupProjectile == null) {
                return;
            }
            if (!GroupProjectile.Enabled) {
                return;
            }
            this.ProjectileCreatedComponentCreated(data, GroupProjectile);
        }
        
        protected void SetRandomPositionComponentCreated(SpawnWithRandomX data, SpawnWithRandomX group) {
            var handler = SetRandomPositionComponentCreatedInstance;
            handler.System = this;
            handler.Event = data;
            handler.Group = group;
            StartCoroutine(handler.Execute());
        }
        
        protected void SetRandomPositionComponentCreatedFilter(SpawnWithRandomX data) {
            var GroupSpawnWithRandomX = SpawnWithRandomXManager[data.EntityId];
            if (GroupSpawnWithRandomX == null) {
                return;
            }
            if (!GroupSpawnWithRandomX.Enabled) {
                return;
            }
            this.SetRandomPositionComponentCreated(data, GroupSpawnWithRandomX);
        }
        
        protected void HazardSystemOnCollisionEnterDispatcherHandler(uFrame.ECS.OnCollisionEnterDispatcher data, DestroyOnCollision source) {
            var handler = HazardSystemOnCollisionEnterDispatcherHandlerInstance;
            handler.System = this;
            handler.Event = data;
            handler.Source = source;
            StartCoroutine(handler.Execute());
        }
        
        protected void HazardSystemOnCollisionEnterDispatcherFilter(uFrame.ECS.OnCollisionEnterDispatcher data) {
            var SourceDestroyOnCollision = DestroyOnCollisionManager[data.EntityId];
            if (SourceDestroyOnCollision == null) {
                return;
            }
            if (!SourceDestroyOnCollision.Enabled) {
                return;
            }
            this.HazardSystemOnCollisionEnterDispatcherHandler(data, SourceDestroyOnCollision);
        }
    }
}
