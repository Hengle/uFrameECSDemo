// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace uFrameECSDemo {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrameECSDemo;
    using uFrame.Kernel;
    using uFrame.ECS;
    using UniRx;
    
    
    public partial class WeaponSystemBase : uFrame.ECS.EcsSystem, uFrame.ECS.ISystemUpdate {
        
        private IEcsComponentManagerOf<ShootingGuns> _ShootingGunsManager;
        
        private IEcsComponentManagerOf<PlayerGunner> _PlayerGunnerManager;
        
        private IEcsComponentManagerOf<GunnerInput> _GunnerInputManager;
        
        private IEcsComponentManagerOf<Gunner> _GunnerManager;
        
        private IEcsComponentManagerOf<Gun> _GunManager;
        
        public IEcsComponentManagerOf<ShootingGuns> ShootingGunsManager {
            get {
                return _ShootingGunsManager;
            }
            set {
                _ShootingGunsManager = value;
            }
        }
        
        public IEcsComponentManagerOf<PlayerGunner> PlayerGunnerManager {
            get {
                return _PlayerGunnerManager;
            }
            set {
                _PlayerGunnerManager = value;
            }
        }
        
        public IEcsComponentManagerOf<GunnerInput> GunnerInputManager {
            get {
                return _GunnerInputManager;
            }
            set {
                _GunnerInputManager = value;
            }
        }
        
        public IEcsComponentManagerOf<Gunner> GunnerManager {
            get {
                return _GunnerManager;
            }
            set {
                _GunnerManager = value;
            }
        }
        
        public IEcsComponentManagerOf<Gun> GunManager {
            get {
                return _GunManager;
            }
            set {
                _GunManager = value;
            }
        }
        
        public override void Setup() {
            base.Setup();
            ShootingGunsManager = ComponentSystem.RegisterGroup<ShootingGunsGroup,ShootingGuns>();
            PlayerGunnerManager = ComponentSystem.RegisterGroup<PlayerGunnerGroup,PlayerGunner>();
            GunnerInputManager = ComponentSystem.RegisterComponent<GunnerInput>(1);
            GunnerManager = ComponentSystem.RegisterComponent<Gunner>(3);
            GunManager = ComponentSystem.RegisterComponent<Gun>(2);
            ShootingGunsManager.CreatedObservable.Subscribe(BeginShootingFilter).DisposeWith(this);
            ShootingGunsManager.RemovedObservable.Subscribe(_=>ShootingGunsComponentDestroyed(_,_)).DisposeWith(this);
        }
        
        protected virtual void WeaponSystemUpdateHandler(ShootingGuns group) {
            var handler = new WeaponSystemUpdateHandler();
            handler.System = this;
            handler.Group = group;
            StartCoroutine(handler.Execute());
        }
        
        protected void WeaponSystemUpdateFilter() {
            var ShootingGunsItems = ShootingGunsManager.Components;
            for (var ShootingGunsIndex = 0
            ; ShootingGunsIndex < ShootingGunsItems.Count; ShootingGunsIndex++
            ) {
                if (!ShootingGunsItems[ShootingGunsIndex].Enabled) {
                    continue;
                }
                this.WeaponSystemUpdateHandler(ShootingGunsItems[ShootingGunsIndex]);
            }
        }
        
        public virtual void SystemUpdate() {
            WeaponSystemUpdateFilter();
        }
        
        protected virtual void BeginShooting(ShootingGuns data, ShootingGuns group) {
            var handler = new BeginShooting();
            handler.System = this;
            handler.Event = data;
            handler.Group = group;
            StartCoroutine(handler.Execute());
        }
        
        protected void BeginShootingFilter(ShootingGuns data) {
            var GroupItem = ShootingGunsManager[data.EntityId];
            if (GroupItem == null) {
                return;
            }
            if (!GroupItem.Enabled) {
                return;
            }
            this.BeginShooting(data, GroupItem);
        }
        
        protected virtual void ShootingGunsComponentDestroyed(ShootingGuns data, ShootingGuns group) {
            var handler = new ShootingGunsComponentDestroyed();
            handler.System = this;
            handler.Event = data;
            handler.Group = group;
            StartCoroutine(handler.Execute());
        }
        
        protected void ShootingGunsComponentDestroyedFilter(ShootingGuns data) {
            var GroupItem = ShootingGunsManager[data.EntityId];
            if (GroupItem == null) {
                return;
            }
            if (!GroupItem.Enabled) {
                return;
            }
            this.ShootingGunsComponentDestroyed(data, GroupItem);
        }
    }
    
    [uFrame.Attributes.uFrameIdentifier("868e3ce9-162f-429b-b89a-4bd6475e7674")]
    public partial class WeaponSystem : WeaponSystemBase {
        
        private static WeaponSystem _Instance;
        
        public WeaponSystem() {
            Instance = this;
        }
        
        public static WeaponSystem Instance {
            get {
                return _Instance;
            }
            set {
                _Instance = value;
            }
        }
    }
}
