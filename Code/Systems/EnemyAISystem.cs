// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace uFrameECSDemo {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using UniRx;
    using uFrame.ECS;
    using uFrame.Kernel;
    using uFrameECSDemo;
    using UnityEngine;
    
    
    [uFrame.Attributes.uFrameIdentifier("55bd0141-748d-490e-9c53-d5c9ec95b58d")]
    public partial class EnemyAISystem : uFrame.ECS.EcsSystem, uFrame.ECS.ISystemFixedUpdate {
        
        private IEcsComponentManagerOf<EnemyAI> _EnemyAIManager;
        
        private IEcsComponentManagerOf<RandomRotation> _RandomRotationManager;
        
        private IEcsComponentManagerOf<Projectile> _ProjectileManager;
        
        private IEcsComponentManagerOf<SpawnWithRandomX> _SpawnWithRandomXManager;
        
        private IEcsComponentManagerOf<DestroyOnCollision> _DestroyOnCollisionManager;
        
        private IEcsComponentManagerOf<Hazard> _HazardManager;
        
        private EnemyAISystemFixedUpdateHandler EnemyAISystemFixedUpdateHandlerInstance = new EnemyAISystemFixedUpdateHandler();
        
        private EnemyAICreatedComponentCreated EnemyAICreatedComponentCreatedInstance = new EnemyAICreatedComponentCreated();
        
        private EnemyAISystemOnCollisionEnterHandler EnemyAISystemOnCollisionEnterHandlerInstance = new EnemyAISystemOnCollisionEnterHandler();
        
        public IEcsComponentManagerOf<EnemyAI> EnemyAIManager {
            get {
                return _EnemyAIManager;
            }
            set {
                _EnemyAIManager = value;
            }
        }
        
        public IEcsComponentManagerOf<RandomRotation> RandomRotationManager {
            get {
                return _RandomRotationManager;
            }
            set {
                _RandomRotationManager = value;
            }
        }
        
        public IEcsComponentManagerOf<Projectile> ProjectileManager {
            get {
                return _ProjectileManager;
            }
            set {
                _ProjectileManager = value;
            }
        }
        
        public IEcsComponentManagerOf<SpawnWithRandomX> SpawnWithRandomXManager {
            get {
                return _SpawnWithRandomXManager;
            }
            set {
                _SpawnWithRandomXManager = value;
            }
        }
        
        public IEcsComponentManagerOf<DestroyOnCollision> DestroyOnCollisionManager {
            get {
                return _DestroyOnCollisionManager;
            }
            set {
                _DestroyOnCollisionManager = value;
            }
        }
        
        public IEcsComponentManagerOf<Hazard> HazardManager {
            get {
                return _HazardManager;
            }
            set {
                _HazardManager = value;
            }
        }
        
        public override void Setup() {
            base.Setup();
            EnemyAIManager = ComponentSystem.RegisterComponent<EnemyAI>();
            RandomRotationManager = ComponentSystem.RegisterComponent<RandomRotation>();
            ProjectileManager = ComponentSystem.RegisterComponent<Projectile>();
            SpawnWithRandomXManager = ComponentSystem.RegisterComponent<SpawnWithRandomX>();
            DestroyOnCollisionManager = ComponentSystem.RegisterComponent<DestroyOnCollision>();
            HazardManager = ComponentSystem.RegisterComponent<Hazard>();
            EnemyAIManager.CreatedObservable.Subscribe(EnemyAICreatedComponentCreatedFilter).DisposeWith(this);
            this.OnEvent<uFrame.ECS.OnCollisionEnterDispatcher>().Subscribe(_=>{ EnemyAISystemOnCollisionEnterFilter(_); }).DisposeWith(this);
        }
        
        protected void EnemyAISystemFixedUpdateHandler(EnemyAI group) {
            var handler = EnemyAISystemFixedUpdateHandlerInstance;
            handler.System = this;
            handler.Group = group;
            handler.Execute();
        }
        
        protected void EnemyAISystemFixedUpdateFilter() {
            var EnemyAIItems = EnemyAIManager.Components;
            for (var EnemyAIIndex = 0
            ; EnemyAIIndex < EnemyAIItems.Count; EnemyAIIndex++
            ) {
                if (!EnemyAIItems[EnemyAIIndex].Enabled) {
                    continue;
                }
                this.EnemyAISystemFixedUpdateHandler(EnemyAIItems[EnemyAIIndex]);
            }
        }
        
        public virtual void SystemFixedUpdate() {
            EnemyAISystemFixedUpdateFilter();
        }
        
        protected void EnemyAICreatedComponentCreated(EnemyAI data, EnemyAI group) {
            var handler = EnemyAICreatedComponentCreatedInstance;
            handler.System = this;
            handler.Event = data;
            handler.Group = group;
            handler.Execute();
        }
        
        protected void EnemyAICreatedComponentCreatedFilter(EnemyAI data) {
            var GroupEnemyAI = EnemyAIManager[data.EntityId];
            if (GroupEnemyAI == null) {
                return;
            }
            if (!GroupEnemyAI.Enabled) {
                return;
            }
            this.EnemyAICreatedComponentCreated(data, GroupEnemyAI);
        }
        
        protected void EnemyAISystemOnCollisionEnterHandler(uFrame.ECS.OnCollisionEnterDispatcher data) {
            var handler = EnemyAISystemOnCollisionEnterHandlerInstance;
            handler.System = this;
            handler.Event = data;
            handler.Execute();
        }
        
        protected void EnemyAISystemOnCollisionEnterFilter(uFrame.ECS.OnCollisionEnterDispatcher data) {
            this.EnemyAISystemOnCollisionEnterHandler(data);
        }
    }
}
