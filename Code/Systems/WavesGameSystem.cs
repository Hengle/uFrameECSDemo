// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace uFrameECSDemo {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using UniRx;
    using uFrame.ECS;
    using uFrame.Kernel;
    
    
    [uFrame.Attributes.uFrameIdentifier("9784e33b-b2d5-4aeb-ac8b-9273187d7c8b")]
    public partial class WavesGameSystem : uFrame.ECS.EcsSystem {
        
        private IEcsComponentManagerOf<SpawnAtInterval> _SpawnAtIntervalManager;
        
        private IEcsComponentManagerOf<WavesGame> _WavesGameManager;
        
        private IEcsComponentManagerOf<SpawnMultipleAtInterval> _SpawnMultipleAtIntervalManager;
        
        private IEcsComponentManagerOf<PointsOnDestroy> _PointsOnDestroyManager;
        
        private IEcsComponentManagerOf<PlayGameButton> _PlayGameButtonManager;
        
        private BeginMultipleIntervalSpawnComponentCreated BeginMultipleIntervalSpawnComponentCreatedInstance = new BeginMultipleIntervalSpawnComponentCreated();
        
        private WavesGameCreatedComponentCreated WavesGameCreatedComponentCreatedInstance = new WavesGameCreatedComponentCreated();
        
        private PointsOnDestroyComponentDestroyed PointsOnDestroyComponentDestroyedInstance = new PointsOnDestroyComponentDestroyed();
        
        private WavesGameSystemGameOverHandler WavesGameSystemGameOverHandlerInstance = new WavesGameSystemGameOverHandler();
        
        private BeginIntervalSpawnComponentCreated BeginIntervalSpawnComponentCreatedInstance = new BeginIntervalSpawnComponentCreated();
        
        public IEcsComponentManagerOf<SpawnAtInterval> SpawnAtIntervalManager {
            get {
                return _SpawnAtIntervalManager;
            }
            set {
                _SpawnAtIntervalManager = value;
            }
        }
        
        public IEcsComponentManagerOf<WavesGame> WavesGameManager {
            get {
                return _WavesGameManager;
            }
            set {
                _WavesGameManager = value;
            }
        }
        
        public IEcsComponentManagerOf<SpawnMultipleAtInterval> SpawnMultipleAtIntervalManager {
            get {
                return _SpawnMultipleAtIntervalManager;
            }
            set {
                _SpawnMultipleAtIntervalManager = value;
            }
        }
        
        public IEcsComponentManagerOf<PointsOnDestroy> PointsOnDestroyManager {
            get {
                return _PointsOnDestroyManager;
            }
            set {
                _PointsOnDestroyManager = value;
            }
        }
        
        public IEcsComponentManagerOf<PlayGameButton> PlayGameButtonManager {
            get {
                return _PlayGameButtonManager;
            }
            set {
                _PlayGameButtonManager = value;
            }
        }
        
        public override void Setup() {
            base.Setup();
            SpawnAtIntervalManager = ComponentSystem.RegisterComponent<SpawnAtInterval>();
            WavesGameManager = ComponentSystem.RegisterComponent<WavesGame>();
            SpawnMultipleAtIntervalManager = ComponentSystem.RegisterComponent<SpawnMultipleAtInterval>();
            PointsOnDestroyManager = ComponentSystem.RegisterComponent<PointsOnDestroy>();
            PlayGameButtonManager = ComponentSystem.RegisterComponent<PlayGameButton>();
            SpawnMultipleAtIntervalManager.CreatedObservable.Subscribe(BeginMultipleIntervalSpawnComponentCreatedFilter).DisposeWith(this);
            WavesGameManager.CreatedObservable.Subscribe(WavesGameCreatedComponentCreatedFilter).DisposeWith(this);
            PointsOnDestroyManager.RemovedObservable.Subscribe(_=>PointsOnDestroyComponentDestroyed(_,_)).DisposeWith(this);
            this.OnEvent<uFrameECSDemo.GameOver>().Subscribe(_=>{ WavesGameSystemGameOverFilter(_); }).DisposeWith(this);
            SpawnAtIntervalManager.CreatedObservable.Subscribe(BeginIntervalSpawnComponentCreatedFilter).DisposeWith(this);
        }
        
        protected void BeginMultipleIntervalSpawnComponentCreated(SpawnMultipleAtInterval data, SpawnMultipleAtInterval group) {
            var handler = BeginMultipleIntervalSpawnComponentCreatedInstance;;
            handler.System = this;
            handler.Event = data;
            handler.Group = group;
            StartCoroutine(handler.Execute());
        }
        
        protected void BeginMultipleIntervalSpawnComponentCreatedFilter(SpawnMultipleAtInterval data) {
            var GroupSpawnMultipleAtInterval = SpawnMultipleAtIntervalManager[data.EntityId];
            if (GroupSpawnMultipleAtInterval == null) {
                return;
            }
            this.BeginMultipleIntervalSpawnComponentCreated(data, GroupSpawnMultipleAtInterval);
        }
        
        protected void WavesGameCreatedComponentCreated(WavesGame data, WavesGame group) {
            var handler = WavesGameCreatedComponentCreatedInstance;;
            handler.System = this;
            handler.Event = data;
            handler.Group = group;
            StartCoroutine(handler.Execute());
        }
        
        protected void WavesGameCreatedComponentCreatedFilter(WavesGame data) {
            var GroupWavesGame = WavesGameManager[data.EntityId];
            if (GroupWavesGame == null) {
                return;
            }
            this.WavesGameCreatedComponentCreated(data, GroupWavesGame);
        }
        
        protected void PointsOnDestroyComponentDestroyed(PointsOnDestroy data, PointsOnDestroy group) {
            var handler = PointsOnDestroyComponentDestroyedInstance;;
            handler.System = this;
            handler.Event = data;
            handler.Group = group;
            StartCoroutine(handler.Execute());
        }
        
        protected void PointsOnDestroyComponentDestroyedFilter(PointsOnDestroy data) {
            var GroupPointsOnDestroy = PointsOnDestroyManager[data.EntityId];
            if (GroupPointsOnDestroy == null) {
                return;
            }
            this.PointsOnDestroyComponentDestroyed(data, GroupPointsOnDestroy);
        }
        
        protected void WavesGameSystemGameOverHandler(uFrameECSDemo.GameOver data, WavesGame group) {
            var handler = WavesGameSystemGameOverHandlerInstance;;
            handler.System = this;
            handler.Event = data;
            handler.Group = group;
            StartCoroutine(handler.Execute());
        }
        
        protected void WavesGameSystemGameOverFilter(uFrameECSDemo.GameOver data) {
            var WavesGameItems = WavesGameManager.Components;
            for (var WavesGameIndex = 0
            ; WavesGameIndex < WavesGameItems.Count; WavesGameIndex++
            ) {
                this.WavesGameSystemGameOverHandler(data, WavesGameItems[WavesGameIndex]);
            }
        }
        
        protected void BeginIntervalSpawnComponentCreated(SpawnAtInterval data, SpawnAtInterval group) {
            var handler = BeginIntervalSpawnComponentCreatedInstance;;
            handler.System = this;
            handler.Event = data;
            handler.Group = group;
            StartCoroutine(handler.Execute());
        }
        
        protected void BeginIntervalSpawnComponentCreatedFilter(SpawnAtInterval data) {
            var GroupSpawnAtInterval = SpawnAtIntervalManager[data.EntityId];
            if (GroupSpawnAtInterval == null) {
                return;
            }
            this.BeginIntervalSpawnComponentCreated(data, GroupSpawnAtInterval);
        }
    }
}
