// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace uFrameECSDemo {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using UniRx;
    using uFrameECSDemo;
    using UnityEngine;
    using uFrame.ECS;
    using uFrame.Kernel;
    
    
    [uFrame.Attributes.uFrameIdentifier("0c9342b9-daed-4b80-8db6-1e9fc00ea971")]
    public partial class FxSystem : uFrame.ECS.EcsSystem {
        
        private IEcsComponentManagerOf<EffectOnDestroy> _EffectOnDestroyManager;
        
        private EffectOnDestroyComponentDestroyed EffectOnDestroyComponentDestroyedInstance = new EffectOnDestroyComponentDestroyed();
        
        public IEcsComponentManagerOf<EffectOnDestroy> EffectOnDestroyManager {
            get {
                return _EffectOnDestroyManager;
            }
            set {
                _EffectOnDestroyManager = value;
            }
        }
        
        public override void Setup() {
            base.Setup();
            EffectOnDestroyManager = ComponentSystem.RegisterComponent<EffectOnDestroy>();
            EffectOnDestroyManager.RemovedObservable.Subscribe(_=>EffectOnDestroyComponentDestroyed(_,_)).DisposeWith(this);
        }
        
        protected void EffectOnDestroyComponentDestroyed(EffectOnDestroy data, EffectOnDestroy group) {
            var handler = EffectOnDestroyComponentDestroyedInstance;
            handler.System = this;
            handler.Event = data;
            handler.Group = group;
            handler.Execute();
        }
        
        protected void EffectOnDestroyComponentDestroyedFilter(EffectOnDestroy data) {
            var GroupEffectOnDestroy = EffectOnDestroyManager[data.EntityId];
            if (GroupEffectOnDestroy == null) {
                return;
            }
            this.EffectOnDestroyComponentDestroyed(data, GroupEffectOnDestroy);
        }
    }
}
